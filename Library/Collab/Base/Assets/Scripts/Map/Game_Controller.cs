using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class Game_Controller : MonoBehaviour {

	public Text textePoint;
	public Text textePatch;
	public Text texteContamination;
	public GameObject menu;
	public GameObject imageAfrique;
	public GameObject imageAmeriqueNord;
	public GameObject imageAmeriqueSud;
	public GameObject imageAsie;
	public GameObject imageEurope;
	public GameObject imageOceanie;
    public GameObject propagation;
    public GameObject resistance;
    public GameObject unlock;
    public Button unlockButton;

	private int point;
	private float timeLeftCompetence;
	private float timeLeftPatch = 999.0f;
	//TODO gestion deltaTimePatch
	private float deltaTimePatch; //0.017 en moyenne entre 2 frames
    private float progressionPatch;
    private float progressionContamination;
	//nombre total d'objet sur le continent
	private float total;
	private const float totalAfrique = 2286205171.0f;
	private const float totalAmeriqueNord = 1361931818.0f;
	private const float totalAmeriqueSud = 1634027120.0f;
	private const float totalAsie = 11184596212.0f;
	private const float totalEurope = 1902047575.0f;
	private const float totalOceanie = 106899703.0f;
	//nombre pc / telephones / objets connectés sur le continent
	private float[] objetAfrique = new float[3] {715370588.0f, 760081250.0f, 810753333.0f};
	private float[] objetAmeriqueNord = new float[3] {352500000.0f, 480681818.0f, 528750000.0f};
	private float[] objetAmeriqueSud = new float[3] {422924666.0f, 576715454.0f, 634387000.0f};
	private float[] objetAsie = new float[3] {2894836667.0f, 3947504545.0f, 4342255000.0f};
	private float[] objetEurope = new float[3] {492294666.0f, 671310909.0f, 738442000.0f};
	private float[] objetOceanie = new float[3] {27668158.0f, 37729307.0f, 41502238.0f};
    //nombre de support contamine pc / telephones / objets connectés
    private float[] contaminationAfrique;
    private float[] contaminationAmeriqueNord;
    private float[] contaminationAmeriqueSud;
    private float[] contaminationAsie;
    private float[] contaminationEurope;
    private float[] contaminationOceanie;
	//total nombre de supports contaminés par continent
	private float contaminationTotAfrique;
	private float contaminationTotAmeriqueNord;
	private float contaminationTotAmeriqueSud;
	private float contaminationTotAsie;
	private float contaminationTotEurope;
	private float contaminationTotOceanie;
	//nombre de supports contaminés à chaque update
	private float pc;
	private float tel;
	private float objetCo;

    //pour l'achat et la selection de competence
    private GameObject activeSkill;
    private int skillCost;
	private bool premierAchat = false;




	// Use this for initialization
	void Start () {
        if (PlayerPrefs.GetInt("ld") == 0)
        {
            point = 3;
            timeLeftCompetence = 1.0f;

            //nombre de support contamine pc / telephones / objets connectés
            contaminationAfrique = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationAmeriqueNord = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationAmeriqueSud = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationAsie = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationEurope = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationOceanie = new float[3] { 0.0f, 0.0f, 0.0f };
            //total nombre de supports contaminés par continent
            contaminationTotAfrique = 0.0f;
            contaminationTotAmeriqueNord = 0.0f;
            contaminationTotAmeriqueSud = 0.0f;
            contaminationTotAsie = 0.0f;
            contaminationTotEurope = 0.0f;
            contaminationTotOceanie = 0.0f;

            progressionPatch = 0.0f;
            progressionContamination = 0.0f;

			pc = 0.0f;
			tel = 0.0f;
			objetCo = 0.0f;

			deltaTimePatch = 0.0f;
        }
        else
            Charger();

        total = totalAfrique + totalAmeriqueNord + totalAmeriqueSud + totalAsie + totalEurope + totalOceanie;
		menu.SetActive (false);
		afficherPoint ();
        activeSkill = null;
        skillCost = 0;
        unlock.SetActive(false);
}

	// Update is called once per frame
	void Update () {
		//calcul point de compétences
		timeLeftCompetence -= Time.deltaTime;
		timeLeftPatch -= deltaTimePatch;
		afficherPatch ();
		gestionContamination ();
		if (timeLeftPatch < 0.0f)
			gameOver ();
		else {
			incrementationContamination ();
			//mise a jour de la couleur des continents
			majCouleurContinent();
		}
		//incrémentation des points de compétence
		if (timeLeftCompetence < 0.0f) {
			timeLeftCompetence = 1.0f - ((int)progressionContamination * 0.15f);
			point = int.Parse (textePoint.text) + 1;
			afficherPoint ();
		}
	}

	//TODO game over
	void gameOver(){
		timeLeftCompetence = 999;
		deltaTimePatch = 0;
		pc *= -1;
		tel *= -1;
		objetCo *= -1;
	}

	float somme(float[] tab){
		return (tab [0] + tab [1] + tab [2]);
	}
		
	void incrementationContamination(){
		//contamination Afrique
		contaminationAfrique[0] = verifIncre(contaminationAfrique[0],objetAfrique[0],pc);
		contaminationAfrique[1] = verifIncre(contaminationAfrique[1],objetAfrique[1],tel);
		contaminationAfrique[2] = verifIncre(contaminationAfrique[2],objetAfrique[2],objetCo);
		//contamination Asie
		contaminationAsie[0] = verifIncre(contaminationAsie[0],objetAsie[0],pc);
		contaminationAsie[1] = verifIncre(contaminationAsie[1],objetAsie[1],tel);
		contaminationAsie[2] = verifIncre(contaminationAsie[2],objetAsie[2],objetCo);
		//contamination Amerique du Nord
		contaminationAmeriqueNord[0] = verifIncre(contaminationAmeriqueNord[0], objetAmeriqueNord[0], pc);
		contaminationAmeriqueNord[1] = verifIncre(contaminationAmeriqueNord[1], objetAmeriqueNord[1], tel);
		contaminationAmeriqueNord[2] = verifIncre(contaminationAmeriqueNord[2], objetAmeriqueNord[2], objetCo);
		//contamination Amerique du Sud
		contaminationAmeriqueSud[0] = verifIncre(contaminationAmeriqueSud[0], objetAmeriqueSud[0], pc);
		contaminationAmeriqueSud[1] = verifIncre(contaminationAmeriqueSud[1], objetAmeriqueSud[1], tel);
		contaminationAmeriqueSud[2] = verifIncre(contaminationAmeriqueSud[2], objetAmeriqueSud[2], objetCo);
		//contamination Europe
		contaminationEurope[0] = verifIncre(contaminationEurope[0], objetEurope[0], pc);
		contaminationEurope[1] = verifIncre(contaminationEurope[1], objetEurope[1], tel);
		contaminationEurope[2] = verifIncre(contaminationEurope[2], objetEurope[2], objetCo);
		//contamination Oceanie
		contaminationOceanie[0] = verifIncre(contaminationOceanie[0], objetOceanie[0], pc);
		contaminationOceanie[1] = verifIncre(contaminationOceanie[1], objetOceanie[1], tel);
		contaminationOceanie[2] = verifIncre(contaminationOceanie[2], objetOceanie[2], objetCo);
	}

	private float verifIncre(float conta, float objet, float incre){
		float retour = conta;
		if (conta < objet)
			retour += incre;
		if(conta > objet)
			retour = objet;
		return retour;
	}

	void increMultiplicateur(float multPc, float multTel, float multObjet){
		pc += multPc;
		tel += multTel;
		objetCo += multObjet;
	}

	void afficherPoint(){
		textePoint.text = "" + point;
	}

	void afficherPatch(){
		progressionPatch = 100 * ((999.0f - timeLeftPatch) / 999.0f);
		textePatch.text = (int)progressionPatch + "%";
	}

	void gestionContamination(){
		float contaminationCour = somme (contaminationAfrique) + somme (contaminationAmeriqueNord) + somme (contaminationAmeriqueSud) + somme (contaminationAsie) + somme (contaminationEurope) + somme (contaminationOceanie);
		progressionContamination = 100 * (1 - ((total - contaminationCour) / total));
		afficherContamination ();
		if (progressionContamination > 100)
			victoire ();
	}

	//TODO victoire
	void victoire(){
		timeLeftCompetence = 999;
		deltaTimePatch = 0;
	}

	void afficherContamination(){
		texteContamination.text = (int)progressionContamination + "%";
	}

	private void printDebug(){
		float tot = contaminationTotAfrique + contaminationTotAmeriqueNord + contaminationTotAmeriqueSud + contaminationTotAsie + contaminationTotEurope + contaminationTotOceanie;
		print ("tot : "+ tot
			+"\npc : "+pc
			+"\ntel : "+tel
			+"\nobjetCo : "+objetCo);
	}

	void majCouleurContinent()
	{
		contaminationTotAfrique = somme(contaminationAfrique);
		contaminationTotAmeriqueNord = somme(contaminationAmeriqueNord);
		contaminationTotAmeriqueSud = somme(contaminationAmeriqueSud);
		contaminationTotAsie = somme(contaminationAsie);
		contaminationTotEurope = somme(contaminationEurope);
		contaminationTotOceanie = somme(contaminationEurope);
		//printDebug ();
		imageAfrique.GetComponent<Graphic>().color = new Color(1f, (totalAfrique-contaminationTotAfrique)/totalAfrique, (totalAfrique-contaminationTotAfrique)/totalAfrique, 1f);
		imageAmeriqueNord.GetComponent<Graphic>().color = new Color(1f, (totalAmeriqueNord-contaminationTotAmeriqueNord)/totalAmeriqueNord, (totalAmeriqueNord-contaminationTotAmeriqueNord)/totalAmeriqueNord, 1f);
		imageAmeriqueSud.GetComponent<Graphic>().color = new Color(1f, (totalAmeriqueSud-contaminationTotAmeriqueSud)/totalAmeriqueSud, (totalAmeriqueSud-contaminationTotAmeriqueSud)/totalAmeriqueSud, 1f);
		imageAsie.GetComponent<Graphic>().color = new Color(1f, (totalAsie-contaminationTotAsie)/totalAsie, (totalAsie-contaminationTotAsie)/totalAsie, 1f);
		imageEurope.GetComponent<Graphic>().color = new Color(1f, (totalEurope-contaminationTotEurope)/totalEurope, (totalEurope-contaminationTotEurope)/totalEurope, 1f);
		imageOceanie.GetComponent<Graphic>().color = new Color(1f, (totalOceanie-contaminationTotOceanie)/totalOceanie, (totalOceanie-contaminationTotOceanie)/totalOceanie, 1f);
	}

    private void SetCotamination(string tag, float[] contamination)
    {
        for (int i = 1; i <= 3; i++)
        {
            PlayerPrefs.SetFloat(tag + i,contamination[i-1]);
        }
    }

    public void Sauvegarder()
	{
        string competenceProgression = "";
        string competenceResistance = "";

		PlayerPrefs.SetInt("pc", point);
		PlayerPrefs.SetFloat("tl", timeLeftCompetence);

        SetCotamination("cAf", contaminationAfrique);
        SetCotamination("cAmN", contaminationAmeriqueNord);
        SetCotamination("cAmS", contaminationAmeriqueSud);
        SetCotamination("cAs", contaminationAsie);
        SetCotamination("cEu", contaminationEurope);
        SetCotamination("cOc", contaminationOceanie);

		PlayerPrefs.SetFloat("tLpch", timeLeftPatch);
		PlayerPrefs.SetFloat ("cntm", progressionContamination);

        SkillOverview[] compPropagation = propagation.GetComponentsInChildren<SkillOverview>(true);
        SkillOverview[] compResistance = resistance.GetComponentsInChildren<SkillOverview>(true);

        for (int i = 0; i < compPropagation.Length; i++)
        {
            SkillOverview current = (SkillOverview)compPropagation.GetValue(i);
            //verification de l'achat de la competence
            if (!current.IsUnlocked())
            {
                competenceProgression = string.Concat(competenceProgression,"0");
            }
            else
            {
                competenceProgression = string.Concat(competenceProgression, "1");
            }
        }
        PlayerPrefs.SetString("cPr", competenceProgression);

        for (int i = 0; i < compResistance.Length; i++)
        {
            SkillOverview current = (SkillOverview)compResistance.GetValue(i);
            //verification de l'achat de la competence
            if (!current.IsUnlocked())
            {
                competenceResistance = string.Concat(competenceResistance, "0");
            }
            else
            {
                competenceResistance = string.Concat(competenceResistance, "1");
            }
        }
        PlayerPrefs.SetString("cRe", competenceResistance);
		SceneManager.LoadScene(0);
    }


    private float[] GetCotamination(string tag)
    {
        float[] contamination = new float[3];
        for (int i = 1; i<=3; i++)
        {
            contamination[i - 1] = PlayerPrefs.GetFloat(tag + i);
        }
        return contamination;
    }


    private void Charger()
    {
        point = PlayerPrefs.GetInt("pc");
        timeLeftCompetence = PlayerPrefs.GetFloat("tl");

        contaminationAfrique = GetCotamination("cAf");
        contaminationAmeriqueNord = GetCotamination("cAmN");
        contaminationAmeriqueSud = GetCotamination("cAmS");
        contaminationAsie = GetCotamination("cAs");
        contaminationEurope = GetCotamination("cEu");
        contaminationOceanie = GetCotamination("cOc");

        contaminationTotAfrique = somme(contaminationAfrique);
        contaminationTotAmeriqueNord = somme(contaminationAmeriqueNord);
        contaminationTotAmeriqueSud = somme(contaminationAmeriqueSud);
        contaminationTotAsie = somme(contaminationAsie);
        contaminationTotEurope = somme(contaminationEurope);
        contaminationTotOceanie = somme(contaminationOceanie);

        timeLeftPatch = PlayerPrefs.GetFloat("tLpch");
        progressionContamination = PlayerPrefs.GetFloat("cntm");

        SkillOverview[] compPropagation = propagation.GetComponentsInChildren<SkillOverview>(true);
        SkillOverview[] compResistance = resistance.GetComponentsInChildren<SkillOverview>(true);

        char[] competenceProgression = PlayerPrefs.GetString("cPr").ToCharArray();
        char[] competenceResistance = PlayerPrefs.GetString("cRe").ToCharArray();

        for (int i = 0; i < compPropagation.Length; i++)
        {
            char current = competenceProgression[i];
            if (current.Equals('1'))
            {
                compPropagation[i].Unlock();
            }
        }

        for (int i = 0; i < compResistance.Length; i++)
        {
            char current = competenceResistance[i];
            if (current.Equals('1'))
            {
                compResistance[i].Unlock();
            }
        }
        /*
         * TODO progression du patch non sauvegarde WTF ?
         * TODO recuperer les competences achetees
         */
    }

	public void AchatCompetence(){
        if (point >= skillCost)
        {
            point -= skillCost;
            afficherPoint();
            activeSkill.GetComponent<Graphic>().color = new Color(0f, 245f / 255f, 0f, 1f);
            unlock.SetActive(false);
			if (!premierAchat) {
				premierAchat = true;
				deltaTimePatch += 0.001f;
			}
			//TODO changer le multiplacateur de la propagation
			float newPc = pc + skillCost * 100;
			float newTel = tel + skillCost * 100;
			float newObj = objetCo + skillCost * 100;
			switch (activeSkill.tag) {
			case "pc":
				pc = newPc;
				break;
			case "tel":
				tel = newTel;
				break;
			case "objetCo":
				objetCo = newObj;
				break;
			case "pc+tel":
				pc = newPc;
				tel = newTel;
				break;
			case "tel+objet":
				tel = newTel;
				objetCo = newObj;
				break;
			case "pc+objet":
				pc = newPc;
				objetCo = newObj;
				break;
			case "tout":
				pc = newPc;
				tel = newTel;
				objetCo = newObj;
				break;
			case "resis":
				deltaTimePatch /= 2;
				break;
			default:
				break;
			}
        }
	}

    public void SelectCompetence(GameObject competence, int coutCompetence, bool debloque, bool conditionVerifier) {
        //print("cout : " + coutCompetence + " debloque : " + debloque + " conditionVerif : " + conditionVerifier);
        activeSkill = competence;
        skillCost = coutCompetence;
        unlock.SetActive(!debloque);
        unlockButton.interactable = conditionVerifier;
    }
}
