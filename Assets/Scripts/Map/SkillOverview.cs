using UnityEngine;
using UnityEngine.UI;

public class SkillOverview : MonoBehaviour {
    public Text descWindow;
    public Text textDescription;
    public Text conditionWindow;
    public SkillOverview[] previousSkills;
    public Text pointComp;
    public Text cout;
    public GameObject competence;
    public Game_Controller controller;

    private int cost;
    private bool debloque;
    private bool modifLiens;
    
    private void Start()
    {
        debloque = false;
        modifLiens = false;
    }

    
    void Update()
    {
        cost = int.Parse(cout.text);
        //maj de la variable debloque
        if (!debloque)
            debloque = competence.GetComponent<Graphic>().color.Equals(new Color(0f, 245f / 255f, 0f, 1f));

        //changement des couleurs des liens
        if (debloque && !modifLiens)
        {
            ChangeLinkColor();
            modifLiens = true;
        }

        if (!debloque && !verificationCondition())
            competence.GetComponent<Graphic>().color = new Color(0f, 90f / 255f, 0f, 1f);
        else if (!debloque && verificationCondition())
            competence.GetComponent<Graphic>().color = new Color(0f, 150f / 255f, 0f, 1f);
        else
            competence.GetComponent<Graphic>().color.Equals(new Color(0f, 245f / 255f, 0f, 1f));
    }
 
	
	public void ShowDescription()
    {
        bool verifCondition = !debloque;

        descWindow.text = textDescription.text;
        conditionWindow.text = "";

        if (!debloque)
        {
            conditionWindow.text = "Pré-requis :";

            if (previousSkills.Length == 0)
                conditionWindow.text += " Aucun\n";
            else
            {
                conditionWindow.text += "\n";
                for (int i = 0; i < previousSkills.Length; i++)
                {
                    SkillOverview current = (SkillOverview)previousSkills.GetValue(i);
                    conditionWindow.text += "- " + current.name + "\n";
                    //verif condition
                    if (!current.IsUnlocked())
                    {
                        verifCondition = false;
                        //print("prev not unlock : " + current.IsUnlocked());
                    }
                }
            }
            int pointTotal = int.Parse(pointComp.text);
            if (pointTotal < cost)
            {
                verifCondition = false;
                //print("pas assez de point");
            }
        }
        
        controller.SelectCompetence(competence, this, cost, debloque, verifCondition);
    }

    public bool IsUnlocked()
    {
        return debloque;
    }
    
    public bool verificationCondition()
    {
        bool verifCondition = !debloque;

        if (previousSkills.Length != 0)
        {
            for (int i = 0; i < previousSkills.Length; i++)
            {
                SkillOverview current = (SkillOverview)previousSkills.GetValue(i);
                //verif condition
                if (!current.IsUnlocked())
                {
                    verifCondition = false;
                }
            }
        }

        int pointTotal = int.Parse(pointComp.text);
        if (pointTotal < cost)
        {
            verifCondition = false;
        }

        return verifCondition;
    }

    private void ChangeLinkColor()
    {
        Graphic[] children = GetComponentsInChildren<Graphic>();
        foreach (Graphic child in children)
        {
            if (child.tag == "liens")
            {
                child.color = new Color(0f, 1f, 0f, 1f);
            }
        }
    } 

    public void RemoveRequirement()
    {
        conditionWindow.text = "";
    }
}
