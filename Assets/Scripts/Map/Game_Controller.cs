using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class Game_Controller : MonoBehaviour {

	public Text textePoint;
	public Text textePatch;
	public Text texteContamination;
    public Text points;
    public Text patch;
    public Text conta;
    public GameObject menu;
	public GameObject ecranVictoire;
	public GameObject ecranDefaite;
	public ColorVariation imageAfrique;
	public ColorVariation imageAmeriqueNord;
	public ColorVariation imageAmeriqueSud;
	public ColorVariation imageAsie;
	public ColorVariation imageEurope;
	public ColorVariation imageOceanie;
    public GameObject propagation;
    public GameObject resistance;
    public GameObject unlock;
    public Button unlockButton;
    public Text unlockText;
    public Switch play_pause;
    public GameObject tutoriel;
    public Text textPC;
    public Text textTel;
    public Text textIOT;
    public Text selectContinent;

	//variable globale à ne pas sauvegarder
	private float newTimeLeftCompetence;
	private float nbContamine = 0.0f;
	private float timeLeftAugmentationCoefTempsPatch = 50.0f;
	private float ancienDeltaTimePatch;
	/*******************************************/
	private int point;
	private float timeLeftCompetence;
	private float timeLeftPatch = 999.0f;
	private bool estGameOver = false;
	private float deltaTimePatch;
	private float coefTempsPatch = 1.0f;
    private float progressionPatch;
    private float progressionContamination;
	//nombre total d'objet sur le continent
	private float total;
	private float totalAfrique;
	private float totalAmeriqueNord;
	private float totalAmeriqueSud;
	private float totalAsie;
	private float totalEurope;
	private float totalOceanie;
	//nombre pc / telephones / objets connectés sur le continent
	private float[] objetAfrique = new float[3] {715370588.0f, 760081250.0f, 810753333.0f};
	private float[] objetAmeriqueNord = new float[3] {352500000.0f, 480681818.0f, 528750000.0f};
	private float[] objetAmeriqueSud = new float[3] {422924666.0f, 576715454.0f, 634387000.0f};
	private float[] objetAsie = new float[3] {2894836667.0f, 3947504545.0f, 4342255000.0f};
	private float[] objetEurope = new float[3] {492294666.0f, 671310909.0f, 738442000.0f};
	private float[] objetOceanie = new float[3] {27668158.0f, 37729307.0f, 41502238.0f};
    //nombre de support contamine pc / telephones / objets connectés
    private float[] contaminationAfrique;
    private float[] contaminationAmeriqueNord;
    private float[] contaminationAmeriqueSud;
    private float[] contaminationAsie;
    private float[] contaminationEurope;
    private float[] contaminationOceanie;
	//total nombre de supports contaminés par continent
	private float contaminationTotAfrique;
	private float contaminationTotAmeriqueNord;
	private float contaminationTotAmeriqueSud;
	private float contaminationTotAsie;
	private float contaminationTotEurope;
	private float contaminationTotOceanie;
	//nombre de supports contaminés à chaque update
	private float pc;
	private float tel;
	private float objetCo;

    //pour l'achat et la selection de competence
    private GameObject activeSkill;
    private int skillCost;
	private bool premierAchat;
    private SkillOverview activeView;

    //conservation de l'information a afficher
    private string currentInformation;



    // Use this for initialization
    void Start () {
        if (PlayerPrefs.GetInt("ld") == 0)
        {
            point = 3;
            timeLeftCompetence = 10.0f;
            tutoriel.SetActive(true);

            //nombre de support contamine pc / telephones / objets connectés
            contaminationAfrique = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationAmeriqueNord = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationAmeriqueSud = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationAsie = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationEurope = new float[3] { 0.0f, 0.0f, 0.0f };
            contaminationOceanie = new float[3] { 0.0f, 0.0f, 0.0f };
            //total nombre de supports contaminés par continent
            contaminationTotAfrique = 0.0f;
            contaminationTotAmeriqueNord = 0.0f;
            contaminationTotAmeriqueSud = 0.0f;
            contaminationTotAsie = 0.0f;
            contaminationTotEurope = 0.0f;
            contaminationTotOceanie = 0.0f;

            progressionPatch = 0.0f;
            progressionContamination = 0.0f;

			pc = 0.0f;
			tel = 0.0f;
			objetCo = 0.0f;

			deltaTimePatch = 0.0f;
        }
        else
            Charger();

		newTimeLeftCompetence = timeLeftCompetence;
		totalAsie = somme (objetAsie);
		totalAfrique = somme (objetAfrique);
		totalAmeriqueNord = somme (objetAmeriqueNord);
		totalAmeriqueSud = somme (objetAmeriqueSud);
		totalEurope = somme (objetEurope);
		totalOceanie = somme (objetOceanie);
		total = totalAfrique + totalAmeriqueNord + totalAmeriqueSud + totalAsie + totalEurope + totalOceanie;
		menu.SetActive (false);
		ecranDefaite.SetActive (false);
		ecranVictoire.SetActive (false);
		afficherPoint ();
        activeSkill = null;
        skillCost = 0;
        unlock.SetActive(false);
        premierAchat = false;
        activeView = null;
		currentInformation = null;
    }

	// Update is called once per frame
	void Update () {
        if (play_pause.isOn)
        {
            //calcul point de compétences
            timeLeftCompetence -= Time.deltaTime;
            timeLeftPatch -= deltaTimePatch;
            afficherPatch();
            gestionContamination();
            if (timeLeftPatch < 0.0f)
                estGameOver = gameOver();
            incrementationContamination(estGameOver);
            //augmentation de patch en fonction du temps
            timeLeftAugmentationCoefTempsPatch -= Time.deltaTime;
            if (timeLeftAugmentationCoefTempsPatch < 0.0f)
            {
                coefTempsPatch += 0.025f;
                timeLeftAugmentationCoefTempsPatch = 100.0f;
                deltaTimePatch = ancienDeltaTimePatch * coefTempsPatch;
            }
            //mise a jour de la couleur des continents
            majCouleurContinent();
            //incrémentation des points de compétence
            if (timeLeftCompetence < 0.0f)
            {
                timeLeftCompetence = newTimeLeftCompetence;
                if (premierAchat)
                    point = int.Parse(points.text) + 1;
                afficherPoint();
            }
        }
        if (activeView != null)
            unlockButton.interactable = activeView.verificationCondition();

        //maj des informations de contamination
        AfficherInformation();
    }
		
	bool gameOver(){
		if (nbContamine == 0.0f)
			ecranDefaite.SetActive (true);
		timeLeftCompetence = 999;
		deltaTimePatch = 0;
		pc = 5000000;
		tel = 5000000;
		objetCo = 5000000;
		return true;
	}

	float somme(float[] tab){
		return (tab [0] + tab [1] + tab [2]);
	}
		
	void incrementationContamination(bool incre){
		//contamination Afrique
		contaminationAfrique[0] = verifIncre(contaminationAfrique[0],objetAfrique[0],pc,incre);
		contaminationAfrique[1] = verifIncre(contaminationAfrique[1],objetAfrique[1],tel, incre);
		contaminationAfrique[2] = verifIncre(contaminationAfrique[2],objetAfrique[2],objetCo, incre);
		//contamination Asie
		contaminationAsie[0] = verifIncre(contaminationAsie[0],objetAsie[0],pc, incre);
		contaminationAsie[1] = verifIncre(contaminationAsie[1],objetAsie[1],tel, incre);
		contaminationAsie[2] = verifIncre(contaminationAsie[2],objetAsie[2],objetCo, incre);
		//contamination Amerique du Nord
		contaminationAmeriqueNord[0] = verifIncre(contaminationAmeriqueNord[0], objetAmeriqueNord[0], pc,incre);
		contaminationAmeriqueNord[1] = verifIncre(contaminationAmeriqueNord[1], objetAmeriqueNord[1], tel, incre);
		contaminationAmeriqueNord[2] = verifIncre(contaminationAmeriqueNord[2], objetAmeriqueNord[2], objetCo, incre);
		//contamination Amerique du Sud
		contaminationAmeriqueSud[0] = verifIncre(contaminationAmeriqueSud[0], objetAmeriqueSud[0], pc, incre);
		contaminationAmeriqueSud[1] = verifIncre(contaminationAmeriqueSud[1], objetAmeriqueSud[1], tel, incre);
		contaminationAmeriqueSud[2] = verifIncre(contaminationAmeriqueSud[2], objetAmeriqueSud[2], objetCo, incre);
		//contamination Europe
		contaminationEurope[0] = verifIncre(contaminationEurope[0], objetEurope[0], pc, incre);
		contaminationEurope[1] = verifIncre(contaminationEurope[1], objetEurope[1], tel, incre);
		contaminationEurope[2] = verifIncre(contaminationEurope[2], objetEurope[2], objetCo, incre);
		//contamination Oceanie
		contaminationOceanie[0] = verifIncre(contaminationOceanie[0], objetOceanie[0], pc, incre);
		contaminationOceanie[1] = verifIncre(contaminationOceanie[1], objetOceanie[1], tel, incre);
		contaminationOceanie[2] = verifIncre(contaminationOceanie[2], objetOceanie[2], objetCo, incre);
	}

	private float verifIncre(float conta, float objet, float incre, bool estGameOver){
		float retour = conta;
		if (estGameOver) {
			if (conta > 0)
				retour -= incre;
			if (conta < 0)
				retour = 0.0f;
		} else {
			if (conta < objet)
				retour += incre;
			if (conta > objet)
				retour = objet;
		}
		return retour;
	}

	void increMultiplicateur(float multPc, float multTel, float multObjet){
		pc += multPc;
		tel += multTel;
		objetCo += multObjet;
	}

	void afficherPoint(){
        points.text = "" + point;
        textePoint.text = "Points de Compétence : " + point;
	}

	void afficherPatch(){
		progressionPatch = 100 * ((999.0f - timeLeftPatch) / 999.0f);
        patch.text = (int)progressionPatch + "";

        textePatch.text = "Patch : " + (int)progressionPatch + "%";
	}

	void gestionContamination(){
		float contaminationCour = somme (contaminationAfrique) + somme (contaminationAmeriqueNord) + somme (contaminationAmeriqueSud) + somme (contaminationAsie) + somme (contaminationEurope) + somme (contaminationOceanie);
		progressionContamination = 100 * (1 - ((total - contaminationCour) / total));
		afficherContamination ();
		if (progressionContamination > 100)
			victoire ();
	}
		
	void victoire(){
		timeLeftCompetence = 999;
		deltaTimePatch = 0;
		ecranVictoire.SetActive (true);
	}

	void afficherContamination(){
        conta.text = (int)progressionContamination + "";
        texteContamination.text = "Contamination : " + (int)progressionContamination + "%";
	}

	private void printDebug(){
		float tot = contaminationTotAfrique + contaminationTotAmeriqueNord + contaminationTotAmeriqueSud + contaminationTotAsie + contaminationTotEurope + contaminationTotOceanie;
		print ("tot : "+ tot
			+"\npc : "+pc
			+"\ntel : "+tel
			+"\nobjetCo : "+objetCo);
	}

	void majCouleurContinent()
	{
		contaminationTotAfrique = somme(contaminationAfrique);
		contaminationTotAmeriqueNord = somme(contaminationAmeriqueNord);
		contaminationTotAmeriqueSud = somme(contaminationAmeriqueSud);
		contaminationTotAsie = somme(contaminationAsie);
		contaminationTotEurope = somme(contaminationEurope);
		contaminationTotOceanie = somme(contaminationEurope);
		//printDebug ();
		imageAfrique.ColorVariator((totalAfrique-contaminationTotAfrique)/totalAfrique);
		imageAmeriqueNord.ColorVariator ((totalAmeriqueNord - contaminationTotAmeriqueNord) / totalAmeriqueNord);
		imageAmeriqueSud.ColorVariator ( (totalAmeriqueSud-contaminationTotAmeriqueSud)/totalAmeriqueSud);
		imageAsie.ColorVariator ((totalAsie - contaminationTotAsie) / totalAsie);
		imageEurope.ColorVariator ((totalEurope-contaminationTotEurope)/totalEurope);
		imageOceanie.ColorVariator ((totalOceanie-contaminationTotOceanie)/totalOceanie);
		nbContamine = contaminationTotAfrique + contaminationTotAmeriqueNord + contaminationTotAmeriqueSud + contaminationTotAsie + contaminationTotEurope + contaminationTotOceanie;
	}

    private void SetCotamination(string tag, float[] contamination)
    {
        for (int i = 1; i <= 3; i++)
        {
            PlayerPrefs.SetFloat(tag + i,contamination[i-1]);
        }
    }

    public void Sauvegarder()
	{
        string competenceProgression = "";
        string competenceResistance = "";

		PlayerPrefs.SetInt("pc", point);
		PlayerPrefs.SetFloat("tl", timeLeftCompetence);

        SetCotamination("cAf", contaminationAfrique);
        SetCotamination("cAmN", contaminationAmeriqueNord);
        SetCotamination("cAmS", contaminationAmeriqueSud);
        SetCotamination("cAs", contaminationAsie);
        SetCotamination("cEu", contaminationEurope);
        SetCotamination("cOc", contaminationOceanie);

		PlayerPrefs.SetFloat("tLpch", timeLeftPatch);
        PlayerPrefs.SetFloat("dltTP", deltaTimePatch);
        PlayerPrefs.SetFloat ("cntm", progressionContamination);

        SkillOverview[] compPropagation = propagation.GetComponentsInChildren<SkillOverview>(true);
        SkillOverview[] compResistance = resistance.GetComponentsInChildren<SkillOverview>(true);

        for (int i = 0; i < compPropagation.Length; i++)
        {
            SkillOverview current = (SkillOverview)compPropagation.GetValue(i);
            //verification de l'achat de la competence
            if (!current.IsUnlocked())
            {
                competenceProgression = string.Concat(competenceProgression,"0");
            }
            else
            {
                competenceProgression = string.Concat(competenceProgression, "1");
            }
        }
        PlayerPrefs.SetString("cPr", competenceProgression);

        for (int i = 0; i < compResistance.Length; i++)
        {
            SkillOverview current = (SkillOverview)compResistance.GetValue(i);
            //verification de l'achat de la competence
            if (!current.IsUnlocked())
            {
                competenceResistance = string.Concat(competenceResistance, "0");
            }
            else
            {
                competenceResistance = string.Concat(competenceResistance, "1");
            }
        }
        PlayerPrefs.SetString("cRe", competenceResistance);
        PlayerPrefs.SetInt("prt", 1);
        SceneManager.LoadScene("Menu");
    }


    private float[] GetCotamination(string tag)
    {
        float[] contamination = new float[3];
        for (int i = 1; i<=3; i++)
        {
            contamination[i - 1] = PlayerPrefs.GetFloat(tag + i);
        }
        return contamination;
    }


    private void Charger()
    {
        point = PlayerPrefs.GetInt("pc");
        timeLeftCompetence = PlayerPrefs.GetFloat("tl");

        contaminationAfrique = GetCotamination("cAf");
        contaminationAmeriqueNord = GetCotamination("cAmN");
        contaminationAmeriqueSud = GetCotamination("cAmS");
        contaminationAsie = GetCotamination("cAs");
        contaminationEurope = GetCotamination("cEu");
        contaminationOceanie = GetCotamination("cOc");

        contaminationTotAfrique = somme(contaminationAfrique);
        contaminationTotAmeriqueNord = somme(contaminationAmeriqueNord);
        contaminationTotAmeriqueSud = somme(contaminationAmeriqueSud);
        contaminationTotAsie = somme(contaminationAsie);
        contaminationTotEurope = somme(contaminationEurope);
        contaminationTotOceanie = somme(contaminationOceanie);

        timeLeftPatch = PlayerPrefs.GetFloat("tLpch");
        deltaTimePatch = PlayerPrefs.GetFloat("dltTP");
        progressionContamination = PlayerPrefs.GetFloat("cntm");

        SkillOverview[] compPropagation = propagation.GetComponentsInChildren<SkillOverview>(true);
        SkillOverview[] compResistance = resistance.GetComponentsInChildren<SkillOverview>(true);

        char[] competenceProgression = PlayerPrefs.GetString("cPr").ToCharArray();
        char[] competenceResistance = PlayerPrefs.GetString("cRe").ToCharArray();

        for (int i = 0; i < compPropagation.Length; i++)
        {
            char current = competenceProgression[i];
            if (current.Equals('1'))
            {
                compPropagation[i].GetComponent<Graphic>().color = new Color(0f, 245f / 255f, 0f, 1f);
            }
        }

        for (int i = 0; i < compResistance.Length; i++)
        {
            char current = competenceResistance[i];
            if (current.Equals('1'))
            {
                compResistance[i].GetComponent<Graphic>().color = new Color(0f, 245f / 255f, 0f, 1f);
            }
        }
    }

	public void AchatCompetence(){
        if (point >= skillCost)
        {
            point -= skillCost;
            afficherPoint();
            activeSkill.GetComponent<Graphic>().color = new Color(0f, 245f / 255f, 0f, 1f);
            unlock.SetActive(false);
            activeView.RemoveRequirement();
			if (!premierAchat) {
				premierAchat = true;
				newTimeLeftCompetence = 10.0f;
				deltaTimePatch += 0.001f; //0.001f
				ancienDeltaTimePatch = deltaTimePatch;
			} else {
				if (activeSkill.tag != "resis") {
					deltaTimePatch *= 1.75f;
					ancienDeltaTimePatch = deltaTimePatch;
				}
				if(newTimeLeftCompetence > 1.0f)
					newTimeLeftCompetence -= 1.0f;
			}
			float newPc = pc + skillCost * 5000;
			float newTel = tel + skillCost * 5000;
			float newObj = objetCo + skillCost * 5000;
			switch (activeSkill.tag) {
			    case "pc":
				    pc = newPc;
				    break;
			    case "tel":
				    tel = newTel;
				    break;
			    case "objetCo":
				    objetCo = newObj;
				    break;
			    case "pc+tel":
				    pc = newPc;
				    tel = newTel;
				    break;
			    case "tel+objet":
				    tel = newTel;
				    objetCo = newObj;
				    break;
			    case "pc+objet":
				    pc = newPc;
				    objetCo = newObj;
				    break;
			    case "tout":
				    pc = newPc;
				    tel = newTel;
				    objetCo = newObj;
				    break;
			    case "resis":
				    deltaTimePatch /= 2f;
				    break;
			    case "resisPass":
				    deltaTimePatch /= 4f;
				    break;
			    default:
				    break;
			}
        }
	}

    public void SelectCompetence(GameObject competence,SkillOverview overviewSkill, int coutCompetence, bool debloque, bool conditionVerifier) {
        //print("cout : " + coutCompetence + " debloque : " + debloque + " conditionVerif : " + conditionVerifier);
        activeSkill = competence;
        activeView = overviewSkill;
        skillCost = coutCompetence;
        unlock.SetActive(!debloque);
        unlockButton.interactable = conditionVerifier;
        unlockText.text = ("Coût : " + coutCompetence);
    }


	public void SetAffichageInformation(Button button){
		currentInformation = button.tag;
	}

	public void ResetAffichageInformation(Button button){
		if (currentInformation == button.tag)
			currentInformation = null;
	}

    private float[] calculContaminationMondial()
    {
        float[] retour = new float[3];
        for(int nbTab=0; nbTab < 3; nbTab++)
            retour[nbTab] = contaminationAfrique[nbTab] + contaminationAmeriqueNord[nbTab] + contaminationAmeriqueSud[nbTab] + contaminationAsie[nbTab] + contaminationEurope[nbTab] + contaminationOceanie[nbTab];
        return (retour);
    }

    private float[] calculTotalObjetMondial()
    {
        float[] retour = new float[3];
        for (int nbTab = 0; nbTab < 3; nbTab++)
            retour[nbTab] = objetAfrique[nbTab] + objetAmeriqueNord[nbTab] + objetAmeriqueSud[nbTab] + objetAsie[nbTab] + objetEurope[nbTab] + objetOceanie[nbTab];
        return (retour);
    }

    private void AfficherInformation()
    {
        float[] currentContinent;
        float[] currentTotalObject;

		switch (currentInformation)
        {
            case "AmeriqueNord":
                selectContinent.text = "Amérique du Nord";
                currentContinent = contaminationAmeriqueNord;
                currentTotalObject = objetAmeriqueNord;
                break;
            case "AmeriqueSud":
                selectContinent.text = "Amérique du Sud";
                currentContinent = contaminationAmeriqueSud;
                currentTotalObject = objetAmeriqueSud;
                break;
            case "Afrique":
                selectContinent.text = "Afrique";
                currentContinent = contaminationAfrique;
                currentTotalObject = objetAfrique;
                break;
            case "Asie":
                selectContinent.text = "Asie";
                currentContinent = contaminationAsie;
                currentTotalObject = objetAsie;
                break;
            case "Europe":
                selectContinent.text = "Europe";
                currentContinent = contaminationEurope;
                currentTotalObject = objetEurope;
                break;
            case "Oceanie":
                selectContinent.text = "Océanie";
                currentContinent = contaminationOceanie;
                currentTotalObject = objetOceanie;
                break;
			default:
				selectContinent.text = "Monde";
				currentContinent = calculContaminationMondial ();
                currentTotalObject = calculTotalObjetMondial ();
                break;
        }

        textPC.text = "PC : " + (int)((currentContinent[0] / currentTotalObject[0]) * 100) + "%";
        textTel.text = "Téléphone : " + (int)((currentContinent[1] / currentTotalObject[1]) * 100) + "%";
        textIOT.text = "IOT : " + (int)((currentContinent[2] / currentTotalObject[2]) * 100) + "%";
    }




	/*
	 * 
	 * FONCTION DEBUG
	 * 
	 * 
	 */

	private void testGameOver(){
		pc = 100000;
		tel = 100000;
		objetCo = 100000;
		deltaTimePatch = 1.0f;
	}
}
